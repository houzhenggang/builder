#!/bin/sh /etc/rc.common
#
# needs in BASE="/openwrt/trunk/package/base-files/files/etc/init.d"
# $BASE/apply_profile
# $BASE/apply_profile.code
# $BASE/apply_profile.definitions
# $BASE/apply_profile.watch

START=98

boot()
{
	local thisfile="/etc/init.d/apply_profile"
	local max_try=30
	local stopfile="/tmp/STOP"
	local interval=60
	local i=0
	local led_loops=10
	local led_state list_states i
	local load rest daemon

	touch "/tmp/lockfile_scheduler_is_running"	# this prevents the scheduler from running, see: _scheduler_allow_run()

	[ -e "/tmp/loader" ] && {			# router is not virgin (so: re-apply config)
		. /tmp/loader
		[ $( _system ram_size ) -gt 16384 ] || {
			_log do $thisfile daemon alert "[OK] ending most daemons"

			for daemon in crond uhttpd olsrd dnsmasq; do {
				_log do $thisfile daemon info "ending daemon '$daemon'"
				/etc/init.d/$daemon stop
				/etc/init.d/*${daemon}* stop
			} done

			case "$( pidof dropbear )" in
				*" "*)
				;;
				*)
					killall logger		# hangs around in tasklist?
					killall dropbear
					wifi down
				;;
			esac

			while true; do {
				read load rest </proc/loadavg
				case "$load" in
					0.0*|0.1*|0.2*|0.3*)		# wait till load goes down
						break
					;;
					*)
						_log do $thisfile daemon info "wait for load <0.4, now: '$load'"
						sleep 30
					;;
				esac
			} done
		}
	}

	while [ $max_try -gt 1 ]; do {
		logger -s "$thisfile [BOOT] start - $thisfile"
		"${thisfile}.code" boot && break

		logger -s "$thisfile [BOOT] executed $myfile.code - but with errors, $max_try try's yet, waiting $interval secs"
		max_try=$(( $max_try - 1 ))

		sleep $interval
	} done

	logger -s "$thisfile [BOOT] ready - removing '$thisfile', autorebooting in $(( $led_loops * 3 )) sec, avoid this by 'touch $stopfile'"
	rm "$thisfile"

	led_firework()
	{
		if [ -e /etc/diag.sh ]; then
			. /etc/diag.sh

			while [ $i -lt $led_loops ]; do {
				logger -s "$thisfile [BOOT] led_firework, loop $i/$led_loops"
				for led_state in preinit failsafe done; do {
					set_state $led_state
					sleep 1
				} done
				i=$(( $i + 1 ))
			} done
		else
			sleep $(( $led_loops * 3 ))
		fi
	}

	led_firework

	[ -e "$stopfile" ] || {
		[ -e "$stopfile" ] || {
			reboot -f
		}
	}
}
